AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Production API Monitoring System'

Globals:
  Function:
    Runtime: nodejs18.x
    Timeout: 10
    MemorySize: 512
    Tracing: Active
    Environment:
      Variables:
        METRICS_TABLE: !Ref ApiMetricsTable
        ALERT_TOPIC: !Ref AlertTopic

Parameters:
  MonitoredApiUrl:
    Type: String
    Default: 'https://httpstat.us/200'
    Description: 'API endpoint to monitor'

Resources:

  ## DynamoDB table for storing metrics
  ApiMetricsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-ApiMetrics'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  ## SNS topic for success alerts & logs
  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${AWS::StackName}-alerts'

  ## SQS queue for failures
  FailureQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-failures'
      VisibilityTimeout: 60

  ## 1) HTTP API Gateway v2 with CORS enabled
  ApiGateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowOrigins:
          - '*'                 # allow all origins
        AllowMethods:
          - GET
          - OPTIONS
        AllowHeaders:
          - Content-Type

  ## 2) Core health-check Lambda, triggered on a schedule
  HealthCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: healthcheck.handler
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt FailureQueue.Arn
      EventInvokeConfig:
        DestinationConfig:
          OnSuccess:
            Type: SNS
            Destination: !Ref AlertTopic
          OnFailure:
            Type: SQS
            Destination: !GetAtt FailureQueue.Arn
      Events:
        HealthCheckSchedule:
          Type: Schedule
          Properties:
            Schedule: rate(1 minute)
            Input: !Sub |
              {
                "url": "${MonitoredApiUrl}",
                "region": "${AWS::Region}"
              }
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref ApiMetricsTable
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt AlertTopic.TopicName

  ## 3) Alert processing Lambda, consuming failures from SQS
  AlertFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: alert.handler
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt FailureQueue.Arn
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt AlertTopic.TopicName

  ## 4) Dashboard Lambda, exposed via our HttpApi
  DashboardFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: dashboard.handler
      Events:
        MetricsEndpoint:
          Type: HttpApi
          Properties:
            Path: /metrics
            Method: GET
            ApiId: !Ref ApiGateway
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ApiMetricsTable

  ## 5) Email subscription for demo
  EmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref AlertTopic
      Protocol: email
      Endpoint: bilal.saleem700@gmail.com  # ‚Üê update to your address

Outputs:
  ## HTTP API endpoint (no stage in snip)
  ApiBaseUrl:
    Description: 'HTTP API base URL'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com'

  ## Dashboard full URL
  DashboardApi:
    Description: 'GET /metrics endpoint'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/metrics'

  MonitoredUrl:
    Description: 'URL being monitored'
    Value: !Ref MonitoredApiUrl
